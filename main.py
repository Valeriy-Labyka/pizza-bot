import os
import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.exceptions import TelegramBadRequest
from aiohttp import web

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from config import BOT_TOKEN, ADMIN_USER_ID, KITCHEN_CHAT_ID, PAYMENT_CARD_NUMBER, PAYMENT_BANK_NAME
from database import init_db, save_order, get_user_orders, get_all_orders, update_order_status, delete_old_completed_orders
from keyboards import (
    main_menu, product_buttons, cart_keyboard, payment_keyboard, admin_keyboard, order_status_buttons,
    phone_keyboard, build_pizza_custom_keyboard, INGREDIENTS, cart_item_buttons
)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

user_carts = {}
user_active_messages = {}
user_custom_pizzas = {}

async def cleanup_old_orders():
    while True:
        await asyncio.sleep(3600)
        await delete_old_completed_orders()

try:
    with open("menu_data.json", "r", encoding="utf-8") as f:
        MENU_DATA = json.load(f)
    logger.info("–§–∞–π–ª menu_data.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ menu_data.json: {e}")
    MENU_DATA = {}


class OrderFlow(StatesGroup):
    waiting_for_address = State()
    waiting_for_phone = State()
    waiting_for_payment = State()
    waiting_for_receipt = State()
    custom_pizza = State()


class AdminFlow(StatesGroup):
    waiting_for_order_id = State()


def get_item_key(category: str, item_index: int, size: str = None, custom: bool = False, ingredients: dict = None):
    if custom:
        ing_str = "_".join([f"{k}{v}" for k, v in sorted(ingredients.items())]) if ingredients else ""
        return f"custom_{size}_{ing_str}"
    else:
        size_suffix = f"_{size}" if size else ""
        return f"{category}_{item_index}{size_suffix}"


def add_to_cart_safe(user_id: int, item_key: str, name: str, price_per_unit: int, quantity: int = 1, details: dict = None):
    if user_id not in user_carts:
        user_carts[user_id] = {}
    if item_key in user_carts[user_id]:
        user_carts[user_id][item_key]["quantity"] += quantity
    else:
        user_carts[user_id][item_key] = {
            "name": name,
            "price_per_unit": price_per_unit,
            "quantity": quantity,
            "details": details
        }


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_active_messages.pop(message.from_user.id, None)
    is_admin = (message.from_user.id == ADMIN_USER_ID)
    await message.answer(
        "üçï <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pizza_Store39!</b>\n"
        "–ì–æ—Ä—è—á–∞—è –ø–∏—Ü—Ü–∞ –≤ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–µ ‚Äî –±—ã—Å—Ç—Ä–æ, –≤–∫—É—Å–Ω–æ, —É–¥–æ–±–Ω–æ!",
        reply_markup=main_menu(is_admin=is_admin),
        parse_mode="HTML"
    )


async def clear_active_messages(user_id: int, bot_instance: Bot):
    data = user_active_messages.get(user_id)
    if data:
        for msg_id in data.get("message_ids", []):
            try:
                await bot_instance.delete_message(chat_id=user_id, message_id=msg_id)
            except Exception:
                pass
        user_active_messages.pop(user_id, None)


@dp.message(F.text.in_({"üçï –ú–µ–Ω—é –ø–∏—Ü—Ü", "ü•ó –°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏", "ü•§ –ù–∞–ø–∏—Ç–∫–∏"}))
async def show_category(message: types.Message, state: FSMContext):
    await state.clear()
    await clear_active_messages(message.from_user.id, bot)

    category_map = {
        "üçï –ú–µ–Ω—é –ø–∏—Ü—Ü": "–ü–∏—Ü—Ü—ã",
        "ü•ó –°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏": "–°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏",
        "ü•§ –ù–∞–ø–∏—Ç–∫–∏": "–ù–∞–ø–∏—Ç–∫–∏"
    }
    category = category_map.get(message.text)
    if not category:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.", parse_mode="HTML")
        return

    items = MENU_DATA.get(category, [])
    if not items:
        await message.answer("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞.", parse_mode="HTML")
        return

    category_short = {"–ü–∏—Ü—Ü—ã": "p", "–°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏": "s", "–ù–∞–ø–∏—Ç–∫–∏": "d"}[category]
    sent_ids = []
    for idx, item in enumerate(items):
        product_id = f"{category_short}{idx}"
        has_sizes = category == "–ü–∏—Ü—Ü—ã"

        if has_sizes:
            caption = f"<b>{item['name']}</b>\n{item['description']}\n\n–ú–∞–ª–µ–Ω—å–∫–∞—è: <b>{item['price_small']}‚ÇΩ</b> | –ë–æ–ª—å—à–∞—è: <b>{item['price_large']}‚ÇΩ</b>"
        else:
            caption = f"<b>{item['name']}</b>\n{item['description']}\n\n–¶–µ–Ω–∞: <b>{item['price_small']}‚ÇΩ</b>"

        kb = product_buttons(
            product_id=product_id,
            price_small=item.get("price_small"),
            price_large=item.get("price_large")
        )

        image_path = item.get("image_url", "").strip()
        try:
            sent = await message.answer_photo(
                photo=types.FSInputFile(image_path),
                caption=caption,
                reply_markup=kb,
                parse_mode="HTML"
            )
        except FileNotFoundError:
            logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            sent = await message.answer(caption, reply_markup=kb, parse_mode="HTML")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è {item['name']}: {e}")
            sent = await message.answer(caption, reply_markup=kb, parse_mode="HTML")
        sent_ids.append(sent.message_id)

    user_active_messages[message.from_user.id] = {
        "category": category,
        "message_ids": sent_ids
    }


@dp.message(F.text.in_({"üõí –ö–æ—Ä–∑–∏–Ω–∞", "‚ÑπÔ∏è –û –Ω–∞—Å / –î–æ—Å—Ç–∞–≤–∫–∞", "üîê –ê–¥–º–∏–Ω–∫–∞"}))
async def handle_main_menu_buttons(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state and current_state != OrderFlow.waiting_for_receipt.state:
        await state.clear()
        is_admin = (message.from_user.id == ADMIN_USER_ID)
        await message.answer("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu(is_admin=is_admin), parse_mode="HTML")

    if message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        await show_cart(message)
    elif message.text == "‚ÑπÔ∏è –û –Ω–∞—Å / –î–æ—Å—Ç–∞–≤–∫–∞":
        await about(message)
    elif message.text == "üîê –ê–¥–º–∏–Ω–∫–∞":
        await admin_cmd(message)


@dp.message(F.text == "üìç –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message, state: FSMContext):
    await state.clear()
    all_orders = await get_user_orders(message.from_user.id)
    if not all_orders:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", parse_mode="HTML")
        return

    active_orders = [order for order in all_orders if order["status"] not in ('done', 'cancelled')]
    if not active_orders:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", parse_mode="HTML")
        return

    status_map = {
        "new": "üÜï –ù–æ–≤—ã–π",
        "cooking": "üç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è",
        "delivery": "üöö –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è",
        "done": "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω—ë–Ω"
    }
    text = "üì¶ <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    for i, order in enumerate(active_orders, 1):
        status = status_map.get(order["status"], order["status"])
        created_at_str = order["created_at"].strftime('%d.%m.%Y %H:%M')
        text += (
            f"<b>{i}.</b> –°—É–º–º–∞: <b>{order['total']}‚ÇΩ</b>\n"
            f"–ê–¥—Ä–µ—Å: {order['address']}\n"
            f"–û–ø–ª–∞—Ç–∞: {order['payment_method']}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è: {created_at_str}\n\n"
        )
    await message.answer(text, parse_mode="HTML")


@dp.callback_query(F.data.startswith("back_to_"))
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await clear_active_messages(callback.from_user.id, bot)
    is_admin = (callback.from_user.id == ADMIN_USER_ID)
    await callback.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu(is_admin=is_admin), parse_mode="HTML")
    try:
        await callback.message.delete()
    except:
        pass


@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state and current_state != OrderFlow.custom_pizza.state:
        await state.clear()
        await callback.answer("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.", show_alert=True)
        await clear_active_messages(callback.from_user.id, bot)
        is_admin = (callback.from_user.id == ADMIN_USER_ID)
        await callback.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu(is_admin=is_admin), parse_mode="HTML")
        return

    data = callback.data.replace("add_", "")
    size = None
    size_name = ""

    if data.endswith("_small"):
        product_key = data[:-6]
        size = "small"
        size_name = "–ú–∞–ª–µ–Ω—å–∫–∞—è"
    elif data.endswith("_large"):
        product_key = data[:-6]
        size = "large"
        size_name = "–ë–æ–ª—å—à–∞—è"
    else:
        product_key = data.replace("_nosize", "")
        size = "nosize"
        size_name = ""

    category_map_short = {"p": "–ü–∏—Ü—Ü—ã", "s": "–°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏", "d": "–ù–∞–ø–∏—Ç–∫–∏"}
    if not product_key or len(product_key) < 2:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
        return

    category_short = product_key[0]
    item_index_str = product_key[1:]
    try:
        item_index = int(item_index_str)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
        return

    target_category = category_map_short.get(category_short)
    if not target_category:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.", show_alert=True)
        return

    items = MENU_DATA.get(target_category, [])
    if item_index >= len(items):
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω (–∏–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞).", show_alert=True)
        return

    found_item = items[item_index]

    if found_item["name"] == "üçï –°–æ–±–µ—Ä–∏ —Å–∞–º":
        base_price = found_item["price_small"] if size == "small" else found_item["price_large"]
        user_custom_pizzas[callback.from_user.id] = {
            "size": size,
            "base_price": base_price,
            "ingredients": {}
        }
        await callback.message.edit_caption(
            caption=f"üçï <b>–°–æ–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–∏—Ü—Ü—É ({size_name})</b>\n"
                    f"–û—Å–Ω–æ–≤–∞: {base_price}‚ÇΩ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:",
            reply_markup=build_pizza_custom_keyboard({}, base_price, size),
            parse_mode="HTML"
        )
        await state.set_state(OrderFlow.custom_pizza)
        return

    if target_category == "–ü–∏—Ü—Ü—ã":
        if size == "small":
            price = found_item.get("price_small")
        elif size == "large":
            price = found_item.get("price_large")
        else:
            price = found_item.get("price_small")
            size_name = "–ú–∞–ª–µ–Ω—å–∫–∞—è"
        if price is None:
            await callback.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.", show_alert=True)
            return
        name = f"{found_item['name']} ({size_name})"
    else:
        price = found_item.get("price_small")
        if price is None:
            await callback.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.", show_alert=True)
            return
        name = found_item["name"]

    item_key = get_item_key(target_category, item_index, size)
    add_to_cart_safe(callback.from_user.id, item_key, name, price, 1)
    await callback.answer(f"‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!")


@dp.callback_query(OrderFlow.custom_pizza, F.data.startswith("custom_add_"))
async def custom_add_ingredient(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in user_custom_pizzas:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    ingredient_key = callback.data.replace("custom_add_", "")
    if ingredient_key not in INGREDIENTS:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.", show_alert=True)
        return

    pizza_data = user_custom_pizzas[user_id]
    current = pizza_data["ingredients"].get(ingredient_key, 0)
    pizza_data["ingredients"][ingredient_key] = current + 50

    await callback.message.edit_caption(
        caption=f"üçï <b>–°–æ–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–∏—Ü—Ü—É ({'–ú–∞–ª–µ–Ω—å–∫–∞—è' if pizza_data['size'] == 'small' else '–ë–æ–ª—å—à–∞—è'})</b>\n"
                f"–û—Å–Ω–æ–≤–∞: {pizza_data['base_price']}‚ÇΩ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:",
        reply_markup=build_pizza_custom_keyboard(pizza_data["ingredients"], pizza_data["base_price"], pizza_data["size"]),
        parse_mode="HTML"
    )


@dp.callback_query(OrderFlow.custom_pizza, F.data == "custom_cancel")
async def custom_cancel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    user_custom_pizzas.pop(callback.from_user.id, None)
    await back_to_main(callback, state)


@dp.callback_query(OrderFlow.custom_pizza, F.data == "custom_done")
async def custom_done(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in user_custom_pizzas:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.", show_alert=True)
        return

    pizza_data = user_custom_pizzas[user_id]
    total_extra = sum((grams // 50) * INGREDIENTS[k][1] for k, grams in pizza_data["ingredients"].items())
    total_price = pizza_data["base_price"] + total_extra

    size_name = "–ú–∞–ª–µ–Ω—å–∫–∞—è" if pizza_data["size"] == "small" else "–ë–æ–ª—å—à–∞—è"
    ingredients_list = []
    for k, grams in pizza_data["ingredients"].items():
        if grams > 0:
            name = INGREDIENTS[k][0]
            ingredients_list.append(f"{name} {grams}–≥")
    ingredients_str = ", ".join(ingredients_list) if ingredients_list else "–±–µ–∑ –¥–æ–±–∞–≤–æ–∫"
    name = f"–ü–∏—Ü—Ü–∞ –°–æ–±–µ—Ä–∏ —Å–∞–º ({size_name})"

    item_key = get_item_key("–ü–∏—Ü—Ü—ã", -1, pizza_data["size"], custom=True, ingredients=pizza_data["ingredients"])
    add_to_cart_safe(
        user_id,
        item_key,
        name,
        total_price,
        1,
        details={
            "size": size_name,
            "base_price": pizza_data["base_price"],
            "ingredients": dict(pizza_data["ingredients"])
        }
    )

    await callback.answer("‚úÖ –ü–∏—Ü—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)
    await state.clear()
    user_custom_pizzas.pop(user_id, None)

    # === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ, –∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π ===
    cart = user_carts.get(user_id, {})
    if not cart:
        await callback.message.answer("üì≠ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", parse_mode="HTML")
        try:
            await callback.message.delete()
        except:
            pass
        return

    subtotal = sum(item["price_per_unit"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if subtotal >= 800 else 150
    total_with_delivery = subtotal + delivery_cost

    text = "üõí <b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
    for item_key, item in cart.items():
        name = item["name"]
        if "–°–æ–±–µ—Ä–∏ —Å–∞–º" in name and "details" in item:
            details = item["details"]
            ingredients_str = ", ".join([f"{INGREDIENTS[k][0]} {v}–≥" for k, v in details["ingredients"].items()])
            name = f"{name} + {ingredients_str}"
        text += f"‚Ä¢ {name} ‚Äî <b>{item['price_per_unit']}‚ÇΩ</b> √ó {item['quantity']} = <b>{item['price_per_unit'] * item['quantity']}‚ÇΩ</b>\n"
    text += f"\nüì¶ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: <b>{subtotal}‚ÇΩ</b>\n"
    text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if delivery_cost == 0 else f'{delivery_cost}‚ÇΩ'}\n"
    text += f"\n<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_with_delivery}‚ÇΩ</b>"

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    await callback.message.answer(text, reply_markup=cart_keyboard(), parse_mode="HTML")


async def show_cart_by_callback(callback: types.CallbackQuery):
    cart = user_carts.get(callback.from_user.id, {})
    if not cart:
        try:
            if callback.message.text is not None:
                await callback.message.edit_text("üì≠ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", parse_mode="HTML")
            else:
                await callback.message.answer("üì≠ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", parse_mode="HTML")
                await callback.message.delete()
        except TelegramBadRequest as e:
            if "there is no text in the message to edit" in str(e):
                await callback.message.answer("üì≠ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", parse_mode="HTML")
                try:
                    await callback.message.delete()
                except:
                    pass
            else:
                raise
        return

    subtotal = sum(item["price_per_unit"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if subtotal >= 800 else 150
    total_with_delivery = subtotal + delivery_cost

    text = "üõí <b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
    for item_key, item in cart.items():
        name = item["name"]
        if "–°–æ–±–µ—Ä–∏ —Å–∞–º" in name and "details" in item:
            details = item["details"]
            ingredients_str = ", ".join([f"{INGREDIENTS[k][0]} {v}–≥" for k, v in details["ingredients"].items()])
            name = f"{name} + {ingredients_str}"
        text += f"‚Ä¢ {name} ‚Äî <b>{item['price_per_unit']}‚ÇΩ</b> √ó {item['quantity']} = <b>{item['price_per_unit'] * item['quantity']}‚ÇΩ</b>\n"
    text += f"\nüì¶ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: <b>{subtotal}‚ÇΩ</b>\n"
    text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if delivery_cost == 0 else f'{delivery_cost}‚ÇΩ'}\n"
    text += f"\n<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_with_delivery}‚ÇΩ</b>"

    try:
        if callback.message.text is not None:
            await callback.message.edit_text(text, reply_markup=cart_keyboard(), parse_mode="HTML")
        else:
            # –≠—Ç–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(text, reply_markup=cart_keyboard(), parse_mode="HTML")
            await callback.message.delete()
    except TelegramBadRequest as e:
        if "there is no text in the message to edit" in str(e):
            await callback.message.answer(text, reply_markup=cart_keyboard(), parse_mode="HTML")
            try:
                await callback.message.delete()
            except:
                pass
        else:
            raise

    await callback.answer()


@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    cart = user_carts.get(message.from_user.id, {})
    if not cart:
        await message.answer("üì≠ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", parse_mode="HTML")
        return

    subtotal = sum(item["price_per_unit"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if subtotal >= 800 else 150
    total_with_delivery = subtotal + delivery_cost

    text = "üõí <b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
    for item_key, item in cart.items():
        name = item["name"]
        if "–°–æ–±–µ—Ä–∏ —Å–∞–º" in name and "details" in item:
            details = item["details"]
            ingredients_str = ", ".join([f"{INGREDIENTS[k][0]} {v}–≥" for k, v in details["ingredients"].items()])
            name = f"{name} + {ingredients_str}"
        text += f"‚Ä¢ {name} ‚Äî <b>{item['price_per_unit']}‚ÇΩ</b> √ó {item['quantity']} = <b>{item['price_per_unit'] * item['quantity']}‚ÇΩ</b>\n"
    text += f"\nüì¶ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: <b>{subtotal}‚ÇΩ</b>\n"
    text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if delivery_cost == 0 else f'{delivery_cost}‚ÇΩ'}\n"
    text += f"\n<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_with_delivery}‚ÇΩ</b>"

    await message.answer(text, reply_markup=cart_keyboard(), parse_mode="HTML")


@dp.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    user_carts.pop(callback.from_user.id, None)
    try:
        await callback.message.edit_text("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", parse_mode="HTML")
    except TelegramBadRequest:
        pass
    is_admin = (callback.from_user.id == ADMIN_USER_ID)
    await callback.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu(is_admin=is_admin), parse_mode="HTML")


@dp.callback_query(F.data.startswith("cart_"))
async def cart_manage(callback: types.CallbackQuery):
    parts = callback.data.split("_", 2)
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)
        return
    action, item_key = parts[1], parts[2]
    cart = user_carts.get(callback.from_user.id, {})
    if item_key not in cart:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.", show_alert=True)
        return

    if action == "inc":
        cart[item_key]["quantity"] += 1
    elif action == "dec":
        if cart[item_key]["quantity"] > 1:
            cart[item_key]["quantity"] -= 1
        else:
            del cart[item_key]
    elif action == "del":
        del cart[item_key]

    if not cart:
        try:
            await callback.message.edit_text("üì≠ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", parse_mode="HTML")
        except TelegramBadRequest:
            await callback.message.answer("üì≠ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", parse_mode="HTML")
        return

    item = cart.get(item_key)
    if item:
        await callback.message.edit_reply_markup(reply_markup=cart_item_buttons(item_key, item["quantity"]))
    else:
        await show_cart_by_callback(callback)


@dp.callback_query(F.data == "checkout")
async def checkout_start(callback: types.CallbackQuery, state: FSMContext):
    cart = user_carts.get(callback.from_user.id, {})
    if not cart:
        await callback.answer("üì≠ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return

    await callback.message.answer(
        "üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ (–ø–æ–¥—ä–µ–∑–¥, –∫–æ–¥, —ç—Ç–∞–∂ –∏ —Ç.–¥.):",
        parse_mode="HTML"
    )
    await state.set_state(OrderFlow.waiting_for_address)


@dp.message(OrderFlow.waiting_for_address)
async def handle_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer(
        "üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª</b> –Ω–∏–∂–µ\n"
        "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é",
        reply_markup=phone_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(OrderFlow.waiting_for_phone)


@dp.message(OrderFlow.waiting_for_phone, F.contact)
async def phone_contact(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_keyboard(), parse_mode="HTML")
    await state.set_state(OrderFlow.waiting_for_payment)


@dp.message(OrderFlow.waiting_for_phone, F.text)
async def phone_text(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not phone.replace("+", "").replace(" ", "").replace("-", "").isdigit() or len(phone) < 10:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ.", parse_mode="HTML")
        return
    await state.update_data(phone=phone)
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_keyboard(), parse_mode="HTML")
    await state.set_state(OrderFlow.waiting_for_payment)


@dp.callback_query(OrderFlow.waiting_for_payment, F.data.startswith("pay_"))
async def payment_selected(callback: types.CallbackQuery, state: FSMContext):
    payment_method_map = {"pay_online": "üí≥ –û–Ω–ª–∞–π–Ω", "pay_cash": "üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏"}
    payment = payment_method_map.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    await state.update_data(payment_method=payment)

    data = await state.get_data()
    cart = user_carts.get(callback.from_user.id, {})
    if not cart:
        await callback.message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑.", parse_mode="HTML")
        await state.clear()
        return

    if "address" not in data or "phone" not in data:
        await callback.message.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML")
        await state.clear()
        return

    subtotal = sum(item["price_per_unit"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if subtotal >= 800 else 150
    total_with_delivery = subtotal + delivery_cost

    items_list = []
    is_custom_order = False
    for item in cart.values():
        item_dict = {
            "name": item["name"],
            "price": item["price_per_unit"],
            "quantity": item["quantity"]
        }
        if "–°–æ–±–µ—Ä–∏ —Å–∞–º" in item["name"] and "details" in item:
            is_custom_order = True
            details = item["details"]
            ingredients_str = ", ".join([f"{INGREDIENTS[k][0]} {v}–≥" for k, v in details["ingredients"].items()])
            item_dict["name"] = f"{item['name']} ({details['size']}) + {ingredients_str}"
        items_list.append(item_dict)

    order_id = await save_order(
        user_id=callback.from_user.id,
        items=items_list,
        total=total_with_delivery,
        address=data["address"],
        payment_method=payment,
        phone=data["phone"]
    )

    if order_id is None:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", parse_mode="HTML")
        await state.clear()
        return

    if payment == "üí≥ –û–Ω–ª–∞–π–Ω":
        await callback.message.answer(
            f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üì¶ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: <b>{subtotal}‚ÇΩ</b>\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if delivery_cost == 0 else f'{delivery_cost}‚ÇΩ'}\n"
            f"<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_with_delivery}‚ÇΩ</b>\n\n"
            f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{total_with_delivery}‚ÇΩ</b> –Ω–∞ –∫–∞—Ä—Ç—É:\n"
            f"<b>{PAYMENT_BANK_NAME}</b>\n"
            f"<code>{PAYMENT_CARD_NUMBER}</code>\n\n"
            f"üìÑ –í –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ: <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n\n"
            f"‚ùó <b>–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç:</b>\n"
            f"‚Ä¢ –§–ò–û –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ—à–ª–∞ –æ–ø–ª–∞—Ç–∞\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã\n"
            f"‚Ä¢ –õ—é–±—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—Ä—É—á–Ω—É—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –æ–ø–ª–∞—Ç—É.",
            parse_mode="HTML"
        )
        await state.set_state(OrderFlow.waiting_for_receipt)
        await state.update_data(order_id=order_id)

    else:
        await callback.message.answer(
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
            f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞: {payment}\n"
            f"üì¶ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: <b>{subtotal}‚ÇΩ</b>\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if delivery_cost == 0 else f'{delivery_cost}‚ÇΩ'}\n"
            f"<b>–ò—Ç–æ–≥–æ: {total_with_delivery}‚ÇΩ</b>\n\n"
            "üïí –ü–∏—Ü—Ü–∞ —É–∂–µ –≤ –ø–µ—á–∏! üçï",
            parse_mode="HTML"
        )

    if KITCHEN_CHAT_ID:
        try:
            order_text = ""
            if is_custom_order:
                order_text += "‚ùó‚ùó‚ùó <b>–°–ü–ï–¶ –ó–ê–ö–ê–ó ‚Äî –ü–ò–¶–¶–ê –°–û–ë–ï–†–ò –°–ê–ú</b> ‚ùó‚ùó‚ùó\n\n"
            order_text += f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n"
            order_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {callback.from_user.full_name}\n"
            order_text += f"üÜî ID: {callback.from_user.id}\n"
            order_text += f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
            order_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            order_text += f"üí≥ –û–ø–ª–∞—Ç–∞: {payment}\n"
            order_text += f"üì¶ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: {subtotal}‚ÇΩ\n"
            order_text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if delivery_cost == 0 else f'{delivery_cost}‚ÇΩ'}\n"
            order_text += f"<b>–ò—Ç–æ–≥–æ: {total_with_delivery}‚ÇΩ</b>\n\n"
            for item in items_list:
                order_text += f"‚Ä¢ {item['name']} √ó{item['quantity']} ‚Äî {item['price'] * item['quantity']}‚ÇΩ\n"
            await bot.send_message(KITCHEN_CHAT_ID, order_text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫—É—Ö–Ω—é: {e}")

    if payment != "üí≥ –û–Ω–ª–∞–π–Ω":
        user_carts.pop(callback.from_user.id, None)
        await state.clear()
        is_admin = (callback.from_user.id == ADMIN_USER_ID)
        await callback.message.answer("üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üçï", reply_markup=main_menu(is_admin=is_admin), parse_mode="HTML")


@dp.message(OrderFlow.waiting_for_receipt)
async def receive_payment_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

    caption = (
        f"üßæ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ –∑–∞–∫–∞–∑—É #{order_id}</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üïí –í—Ä–µ–º—è: {message.date.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b>\n{message.text or '‚Äî'}"
    )

    try:
        if message.photo:
            photo = message.photo[-1]
            await bot.send_photo(
                chat_id=ADMIN_USER_ID,
                photo=photo.file_id,
                caption=caption,
                parse_mode="HTML"
            )
        elif message.document:
            await bot.send_document(
                chat_id=ADMIN_USER_ID,
                document=message.document.file_id,
                caption=caption,
                parse_mode="HTML"
            )
        else:
            await bot.send_message(ADMIN_USER_ID, caption, parse_mode="HTML")

        await message.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞–∫–∞–∑.", parse_mode="HTML")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", parse_mode="HTML")

    user_carts.pop(message.from_user.id, None)
    await state.clear()
    is_admin = (message.from_user.id == ADMIN_USER_ID)
    await message.answer("üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üçï", reply_markup=main_menu(is_admin=is_admin), parse_mode="HTML")


@dp.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å / –î–æ—Å—Ç–∞–≤–∫–∞")
async def about(message: types.Message):
    await message.answer(
        "<b>üçï Pizza_Store39</b>\n\n"
        "üìç –ê–¥—Ä–µ—Å: –≥. –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, —É–ª. –î–º. –î–æ–Ω—Å–∫–æ–≥–æ, 39\n"
        "üïí –†–∞–±–æ—Ç–∞–µ–º: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 23:00\n\n"
        "<b>üöö –î–æ—Å—Ç–∞–≤–∫–∞:</b>\n"
        "‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞: 150‚ÇΩ\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 800‚ÇΩ\n"
        "‚Ä¢ –í—Ä–µ–º—è: 30‚Äì60 –º–∏–Ω—É—Ç\n\n"
        "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: <b>+7 (952) 114-87-67</b>",
        parse_mode="HTML"
    )


@dp.message(Command("admin"))
async def admin_cmd(message: types.Message):
    if message.from_user.id == ADMIN_USER_ID:
        await message.answer("üîê <b>–ê–¥–º–∏–Ω–∫–∞:</b>", reply_markup=admin_keyboard(), parse_mode="HTML")
    else:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", parse_mode="HTML")


@dp.callback_query(F.data == "admin_orders")
async def admin_show_orders(callback: types.CallbackQuery):
    all_orders = await get_all_orders(20)
    active_orders = [order for order in all_orders if order["status"] not in ('done', 'cancelled')]

    if not active_orders:
        await callback.message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", parse_mode="HTML")
        await callback.answer()
        return

    keyboard = []
    for order in active_orders:
        status_emoji = {"new": "üÜï", "cooking": "üç≥", "delivery": "üöö", "done": "‚úÖ", "cancelled": "‚ùå"}.get(order['status'], "‚ùì")
        btn_text = f"{status_emoji} –ó–∞–∫–∞–∑ #{order['id']} ({order['total']}‚ÇΩ)"
        keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=f"admin_order_{order['id']}")])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.answer("üì¶ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>", reply_markup=reply_markup, parse_mode="HTML")
    await callback.answer()


@dp.callback_query(F.data.startswith("admin_order_"))
async def show_admin_order_details(callback: types.CallbackQuery):
    try:
        order_id = int(callback.data.split("_")[-1])
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    from database import pool
    async with pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT id, user_id, items, total, address, phone, payment_method, status, created_at FROM orders WHERE id = $1",
            order_id
        )
    
    if not row:
        await callback.message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    items = json.loads(row["items"]) if row["items"] else []
    status_map = {
        "new": "üÜï –ù–æ–≤—ã–π",
        "cooking": "üç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è",
        "delivery": "üöö –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è",
        "done": "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω—ë–Ω"
    }
    status_text = status_map.get(row["status"], row["status"])
    created_at_str = row["created_at"].strftime('%d.%m.%Y %H:%M')

    try:
        user = await bot.get_chat(row["user_id"])
        user_name = user.full_name
    except:
        user_name = f"ID: {row['user_id']}"

    text = (
        f"üìã <b>–ó–∞–∫–∞–∑ #{row['id']}</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {row['phone']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {row['address']}\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞: {row['payment_method']}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"üïó –í—Ä–µ–º—è: {created_at_str}\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {row['total']}‚ÇΩ\n\n"
        f"<b>–°–æ—Å—Ç–∞–≤:</b>\n"
    )
    for item in items:
        text += f"‚Ä¢ {item.get('name', '‚Äî')} √ó{item.get('quantity', 1)}\n"

    await callback.message.edit_text(text, reply_markup=order_status_buttons(row['id'], row['status']), parse_mode="HTML")


@dp.callback_query(F.data.startswith("status_"))
async def admin_update_order_status(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_")
        action = parts[1]
        order_id = int(parts[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return

    new_status = "cancelled" if action == "cancel" else action
    user_id = await update_order_status(order_id, new_status)

    if user_id:
        status_messages = {
            "cooking": "–ø–∏—Ü—Ü–∞ —É–∂–µ –≤ –ø–µ—á–∏! üçï",
            "delivery": "–∫—É—Ä—å–µ—Ä –≤—ã–µ—Ö–∞–ª –∫ –≤–∞–º! üöö",
            "done": "–∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ! ‚úÖ",
            "cancelled": "–∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
        }
        msg = status_messages.get(action, f"—Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'")
        try:
            await bot.send_message(user_id, f"üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: {msg}", parse_mode="HTML")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    status_labels = {"cooking": "–≥–æ—Ç–æ–≤–∏—Ç—Å—è", "delivery": "–≤—ã–µ—Ö–∞–ª", "done": "–∑–∞–≤–µ—Ä—à—ë–Ω", "cancel": "–æ—Ç–º–µ–Ω—ë–Ω"}
    await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '{status_labels.get(action, action)}'")
    await callback.message.edit_reply_markup(reply_markup=order_status_buttons(order_id, new_status))


# === ON STARTUP / SHUTDOWN ===
async def on_startup(app):
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"RENDER_EXTERNAL_URL = {os.getenv('RENDER_EXTERNAL_URL')}")
    logger.info(f"DATABASE_URL –∑–∞–¥–∞–Ω: {'–î–∞' if os.getenv('DATABASE_URL') else '–ù–µ—Ç'}")
    
    await init_db()
    asyncio.create_task(cleanup_old_orders())
    
    WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")
    if not WEBHOOK_HOST:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return

    webhook_url = f"{WEBHOOK_HOST}/webhook/{BOT_TOKEN}"
    await bot.set_webhook(webhook_url)
    logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")


async def on_shutdown(app):
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.session.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# === MAIN ===
def main():
    app = web.Application()
    webhook_path = f"/webhook/{BOT_TOKEN}"
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=webhook_path)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_shutdown)
    port = int(os.getenv("PORT", 8000))
    web.run_app(app, host="0.0.0.0", port=port)


if __name__ == "__main__":
    main()