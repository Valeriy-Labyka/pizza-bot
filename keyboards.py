from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

def main_menu(is_admin: bool = False):
    keyboard = [
        [KeyboardButton(text="üçï –ú–µ–Ω—é –ø–∏—Ü—Ü"), KeyboardButton(text="ü•ó –°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏")],
        [KeyboardButton(text="ü•§ –ù–∞–ø–∏—Ç–∫–∏"), KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="üìç –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å / –î–æ—Å—Ç–∞–≤–∫–∞")]
    ]
    if is_admin:
        keyboard.append([KeyboardButton(text="üîê –ê–¥–º–∏–Ω–∫–∞")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def phone_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )


def product_buttons(product_id: str, price_small: int = None, price_large: int = None):
    keyboard = []
    if price_large is not None and price_small is not None:
        keyboard.append([
            InlineKeyboardButton(text=f"–ú–∞–ª–µ–Ω—å–∫–∞—è ({price_small}‚ÇΩ)", callback_data=f"add_{product_id}_small"),
            InlineKeyboardButton(text=f"–ë–æ–ª—å—à–∞—è ({price_large}‚ÇΩ)", callback_data=f"add_{product_id}_large")
        ])
    elif price_small is not None:
        keyboard.append([
            InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ({price_small}‚ÇΩ)", callback_data=f"add_{product_id}_nosize")
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def cart_item_buttons(item_key: str, quantity: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"cart_dec_{item_key}"),
            InlineKeyboardButton(text=str(quantity), callback_data="noop"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"cart_inc_{item_key}")
        ],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"cart_del_{item_key}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")]
    ])


def cart_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")]
    ])


def payment_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–Ω–ª–∞–π–Ω", callback_data="pay_online")],
        [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏", callback_data="pay_cash")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cart")]
    ])


def admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])


def order_status_buttons(order_id: int, current_status: str = "new"):
    status_map = {
        "new": ["cooking", "cancelled"],
        "cooking": ["delivery", "done", "cancelled"],
        "delivery": ["done", "cancelled"],
        "done": [],
        "cancelled": []
    }
    available_transitions = status_map.get(current_status, [])

    buttons = []
    if "cooking" in available_transitions:
        buttons.append(InlineKeyboardButton(text="üç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è", callback_data=f"status_cooking_{order_id}"))
    if "delivery" in available_transitions:
        buttons.append(InlineKeyboardButton(text="üöö –í—ã–µ—Ö–∞–ª", callback_data=f"status_delivery_{order_id}"))
    if "done" in available_transitions:
        buttons.append(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω", callback_data=f"status_done_{order_id}"))
    if "cancelled" in available_transitions:
        buttons.append(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"status_cancel_{order_id}"))

    keyboard = []
    for i in range(0, len(buttons), 2):
        keyboard.append(buttons[i:i+2])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_order_{order_id}")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


INGREDIENTS = {
    "tomato": ("–ü–æ–º–∏–¥–æ—Ä—ã", 20),
    "cheese": ("–°—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞", 30),
    "ham": ("–í–µ—Ç—á–∏–Ω–∞", 40),
    "pepperoni": ("–ü–µ–ø–ø–µ—Ä–æ–Ω–∏", 45),
    "mushrooms": ("–®–∞–º–ø–∏–Ω—å–æ–Ω—ã", 25),
    "olives": ("–û–ª–∏–≤–∫–∏", 20),
    "corn": ("–ö—É–∫—É—Ä—É–∑–∞", 15),
    "onion": ("–õ—É–∫", 10),
    "cucumber": ("–û–≥—É—Ä—Ü—ã", 15),
    "bacon": ("–ë–µ–∫–æ–Ω", 50),
    "chicken": ("–ö—É—Ä–∏—Ü–∞", 40),
    "salami": ("–°–∞–ª—è–º–∏", 45),
    "pineapple": ("–ê–Ω–∞–Ω–∞—Å", 20),
    "garlic_sauce": ("–ß–µ—Å–Ω–æ—á–Ω—ã–π —Å–æ—É—Å", 15),
    "bbq_sauce": ("–°–æ—É—Å –±–∞—Ä–±–µ–∫—é", 15),
    "ketchup": ("–ö–µ—Ç—á—É–ø", 10),
    "mayo": ("–ú–∞–π–æ–Ω–µ–∑", 10),
    "parmesan": ("–ü–∞—Ä–º–µ–∑–∞–Ω", 35),
    "gorgonzola": ("–ì–æ—Ä–≥–æ–Ω–∑–æ–ª–∞", 50),
    "feta": ("–§–µ—Ç–∞", 30)
}


def build_pizza_custom_keyboard(selected: dict, base_price: int, size: str):
    lines = []
    total_extra = 0
    ingredient_items = list(INGREDIENTS.items())
    for i in range(0, len(ingredient_items), 2):
        row = []
        for key, (name, price_per_50g) in ingredient_items[i:i+2]:
            grams = selected.get(key, 0)
            item_price = (grams // 50) * price_per_50g
            total_extra += item_price
            if grams > 0:
                row.append(InlineKeyboardButton(text=f"‚úÖ {name} ({grams}–≥)", callback_data=f"custom_add_{key}"))
            else:
                row.append(InlineKeyboardButton(text=name, callback_data=f"custom_add_{key}"))
        lines.append(row)

    total = base_price + total_extra
    lines.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="custom_cancel"),
        InlineKeyboardButton(text=f"‚úÖ –ì–æ—Ç–æ–≤–æ ({total}‚ÇΩ)", callback_data="custom_done")
    ])
    return InlineKeyboardMarkup(inline_keyboard=lines)